package com.madproject.leftoverfooddonation;

import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import java.util.ArrayList;
import java.util.concurrent.CountDownLatch;

import static com.madproject.leftoverfooddonation.UserActivity.phoneNo;
import static com.madproject.leftoverfooddonation.utility.CheckConnection.*;

public class FindFoodDonorActivity extends AppCompatActivity {
    private RecyclerView recyclerView;
    private FirebaseDatabase database;
    private DatabaseReference ref1,ref2;
    private static ProgressDialog progressDialog;
    private static TextView noDataMessage;
    private static AsyncTask<Void,Void,Void> fetchDonorData = null;
    private ArrayList<UserData> donorData = new ArrayList<>();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.recycler_view_layout);
        recyclerView = findViewById(R.id.recycleview);
        noDataMessage = findViewById(R.id.noDataMessage);
        noDataMessage.setText("Sorry! Currently there are no food donors");
        recyclerView.setLayoutManager(new LinearLayoutManager(this));
        database = FirebaseDatabase.getInstance();

        loadFoodDonors();
    }

    private void loadFoodDonors() {
        donorData.clear();
        progressDialog = new ProgressDialog(FindFoodDonorActivity.this);
        progressDialog.show();
        (progressDialog.getWindow().getAttributes()).dimAmount = 0.5f;
        progressDialog.setContentView(R.layout.progress_dialog);
        progressDialog.getWindow().setBackgroundDrawableResource(android.R.color.transparent);
        progressDialog.setOnCancelListener(new DialogInterface.OnCancelListener() {
            @Override
            public void onCancel(DialogInterface dialog) {
                try {
                    fetchDonorData.cancel(false);
                }catch (NullPointerException e) {}
            }
        });

        ref1 = database.getReference("/leftover-food-donation/FoodDetails/");
        if(!checkConnection(FindFoodDonorActivity.this)) {progressDialog.dismiss(); return;}
        ref1.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull final DataSnapshot dataSnapshot) {
                fetchDonorData = new AsyncTask<Void, Void, Void>() {
                    @Override
                    protected Void doInBackground(Void... voids) {
                        for (DataSnapshot ds : dataSnapshot.getChildren()) {
                            if(fetchDonorData.isCancelled()) return null;
                            final String phone = ds.getKey();
                            if (!phone.equals(phoneNo)) {  //If food is not of current user
                                final UserData[] user = {null};  //autogenerated
                                final CountDownLatch done = new CountDownLatch(1);
                                ref2 = database.getReference("/leftover-food-donation/Users/"+phone+"/");
                                if(!isOnline(FindFoodDonorActivity.this)) { donorData.clear(); return null;}
                                ref2.addListenerForSingleValueEvent(new ValueEventListener() {
                                    @Override
                                    public void onDataChange(@NonNull DataSnapshot d) {
                                        user[0] = new UserData(d.child("name").getValue().toString(), d.child("phone").getValue().toString(), d.child("email").getValue().toString());
                                        done.countDown();
                                        if(fetchDonorData.isCancelled()) return;
                                    }

                                    @Override
                                    public void onCancelled(@NonNull DatabaseError databaseError) {
                                        donorData.clear();
                                        progressDialog.dismiss();
                                    }
                                });
                                try {
                                    done.await();
                                } catch(InterruptedException e) {e.printStackTrace();}
                                donorData.add(user[0]);
                            }
                        }
                        return null;
                    }

                    @Override
                    protected void onPostExecute(Void aVoid) {
                        progressDialog.dismiss();
                        if(!fetchDonorData.isCancelled() && donorData.size()!=0) {
                            noDataMessage.setVisibility(View.INVISIBLE);
                            DonorListAdapter adapter = new DonorListAdapter(FindFoodDonorActivity.this, donorData);
                            recyclerView.setAdapter(adapter);
                        }
                        else
                            noDataMessage.setVisibility(View.VISIBLE);
                    }
                };
                fetchDonorData.execute();
            }
            @Override
            public void onCancelled(@NonNull DatabaseError databaseError) {

            }

        });
    }

    @Override
    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
        if(item.getItemId()==R.id.refresh)
            loadFoodDonors();
        return super.onOptionsItemSelected(item);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater menuInflater = getMenuInflater();
        menuInflater.inflate(R.menu.sub_activity_menu, menu);
        return super.onCreateOptionsMenu(menu);
    }
}
